#include <stdio.h>
#include <string.h>
#include <ctype.h>
#include <stdbool.h>

#define N       10
 
static void error(unsigned int line, int c, bool* err) {
    char    buf[3];

    *err = true;

    if (c == '\n')
        strcpy(buf, "\\n");
    else {
        buf[0] = c;
        buf[1] = 0;
    }
    if (c >= 32 && c <= 126)
        printf("line %d: error at %c\n", line, (char)c);
    else
        if (c == '\n')
            printf("line %d: error at \\n\n", line);
        else
            printf("line %d: error at %d\n", line, c);
}

int main(int argc, char *argv[])
{
    int         stack[10];
    int         i;
    int         c;
    int         x;
    bool        num;
    bool        err;
    unsigned    line;

    x       = 0;
    i       = 0;
    line    = 1;
    num     = false;
    err     = false;

    while((c = getchar()) != EOF) {

        if (err) {
lerr:;
            if (c == '\n') {
                line += 1;
                err = false;
                i = 0;
                x = 0;
            }
            continue;

        } else if (c == '\n') {

            if (i > 1 || num == true) {
                error(line, c, &err);
                goto lerr;
            } else if (i == 0) {
                error(line, c, &err);
                goto lerr;
            } else {
                printf("line %d: %d\n", line, stack[0]);
                line += 1;
                i = 0;
                x = 0;
            }
            continue;

        } else if (isdigit(c)) {

            x = x * 10 + c - '0';
            num = true;
            // printf("new digit: %d\n", x);
            continue;

        } else if (num) {
            
            if (i == N) {
                error(line, x, &err);
                continue;

            } else {
                stack[i] = x;
                // printf("new element on stack[%d]: %d\n", i, stack[i]);
                i++;
                num = false;
                x = 0;

            }
            if (c == '+' || c == '-' || c == '*' || c == '/') {
                goto opper;
            }
            continue;
        } else if ((char)c == ' ') {
            continue;
        } else {
opper:;
            if (c == '+') {
                // printf("stack[%d] = %d + %d = %d\n", i-2, stack[i-2], stack[i-1], stack[i-2] + stack[i-1]);
                if (i - 2 < 0) {
                    error(line, c, &err);
                    goto lerr;
                }
                stack[i-2] = stack[i-2] + stack[i-1];
                i--;
                continue;
            } else if(c == '-') {
                // printf("stack[%d] = %d - %d = %d\n", i-2, stack[i-2], stack[i-1], stack[i-2] - stack[i-1]);
                if (i - 2 < 0) {
                    error(line, c, &err);
                    goto lerr;
                }
                stack[i-2] = stack[i-2] - stack[i-1];
                i--;
                continue;
            } else if (c == '*') {
                // printf("stack[%d] = %d * %d = %d\n", i-2, stack[i-2], stack[i-1], stack[i-2] * stack[i-1]);
                if (i - 2 < 0) {
                    error(line, c, &err);
                    goto lerr;
                }
                stack[i-2] = stack[i-2] * stack[i-1];
                i--;
                continue;
            } else if (c == '/') {
                if (stack[i-1] == 0 || stack[i-2] == 0) {
                    error(line, c, &err);
                    goto lerr;
                } else {
                    // printf("stack[%d] = %d / %d = %d\n", i-2, stack[i-2], stack[i-1], stack[i-2] / stack[i-1]);
                    if (i - 2 < 0) {
                        error(line, c, &err);
                        goto lerr;
                    }
                    stack[i-2] = stack[i-2] / stack[i-1];
                }
                i--;
                continue;
            }
        }
        error(line, c, &err);
        goto lerr;
        // printf("eow. %d | %c \n", c, (char)c);
    }

    return 0;
}
