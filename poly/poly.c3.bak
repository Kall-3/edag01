#include <stdbool.h>
#include <stdio.h>
#include <stdlib.h>
#include <ctype.h>
#include <string.h>

#include "error.h"
#include "poly.h"

#define MOD 1019
#define SIZE 1020

typedef struct poly_t {
    int coef;
    int exp;
} poly_t;

inline __attribute__((always_inline)) poly_t* new_poly_from_string(const char* pol) {
    poly_t* p = calloc(SIZE, sizeof(poly_t));

    const char *current = pol;
    char token[128];
    char next_char;
    int negative = 1;
    int coef, exp;

    while (sscanf(current, "%127[^+-]", token) == 1) {
        coef = 1;
        exp = 0;
        if (sscanf(token, "%dx^%d", &coef, &exp) == 2 || sscanf(token, "x^%d", &exp)) {
            // x^ term with no coef
        } else if (sscanf(token, "%d%c", &coef, &next_char) == 2 && next_char == 'x') {
            exp = 1;  // x term
        } else if (sscanf(token, "%d", &coef) == 1) {
            exp = 0;  // constant term
        }

        // Add term to polynomial
        p[exp % MOD].coef = coef * negative;
        p[exp % MOD].exp = exp;
        negative = 1;

        // Move to the next term
        current += strlen(token);
        if (*current != '\0') {
            if (current[0] == '-') {
                negative = -1;
            }
            current++;  // Skip the + or - sign
        }
    }
    return p;
}

inline __attribute__((always_inline)) void free_poly(poly_t* p) {
    free(p);
}

inline __attribute__((always_inline)) poly_t* mul(poly_t* p, poly_t* q) {
    poly_t* r = calloc(SIZE, sizeof(poly_t));
    int i, j, coef, exp;

    for (i = 0; i <= MOD; i++) {
        for (j = 0; j <= MOD; j++) {
            coef    = p[i].coef * q[j].coef;
            exp     = p[i].exp + q[j].exp;
            
            r[exp % MOD].coef += coef;
            r[exp % MOD].exp = exp;
        }
    }

    return r;
}

inline __attribute__((always_inline)) void print_poly(poly_t* p) {
    int a;
    int first = 1;

    for (int i = MOD; i >= 0; i -= 1) {
        if (p[i].coef != 0 || p[i].exp != 0) {
            if (!first) {
                if (p[i].coef > 0) {
                    printf(" + ");
                } else if (p[i].coef < 0) {
                    printf(" - ");
                }
            }
            first = 0;
            if ((a = abs(p[i].coef)) > 1 || (a == 1 && i != MOD && p[i].exp == 0))
                printf("%d", a);

            if (p[i].exp > 1)
                printf("x^%d", p[i].exp);
            else if (p[i].exp == 1)
                printf("x");
        }
    }
    printf("\n");
}

#ifdef INCLUDE_MAIN // Run with flag -DINCLUDE_MAIN when compiling
int main(void) {
    // poly_t* p = new_poly_from_string("x^2 - 7x + 1"); // 3x + 2
    // poly_t* q = new_poly_from_string("3x + 2");

    poly_t* p = new_poly_from_string("x^10000000 + 2");
    poly_t* q = new_poly_from_string("2x^2 + 3x + 4");

    // poly_t* p = new_poly_from_string("772x^502 + 749x^418 - 806x^365 - 235x^338 + 657x^328 + 558x^259 - 152x^237 - 997x^138 x^104 - 742x^23 - 245x");
    // poly_t* p = new_poly_from_string("924x^871 + 86x^824 - 242x^749 + 600x^663 - 333x^570 + 952x^552 + 747x^508 - 945x^494 + x^408 - 877x^372 - 748x^359 + 646x^290 + 820x^259 - 405x^179 + 849x^176 - 419x^172 + 662x^118 - 127x^87 - 664x^3 + 652");
    // printf("924x^871 + 86x^824 - 242x^749 + 600x^663 - 333x^570 + 952x^552 + 747x^508 - 945x^494 + x^408 - 877x^372 - 748x^359 + 646x^290 + 820x^259 - 405x^179 + 849x^176 - 419x^172 + 662x^118 - 127x^87 - 664x^3 + 652\n");

    poly_t* r = mul(p, q);
    print_poly(r);
    free_poly(p);
    free_poly(q);
    free_poly(r);

    return 0;
}
#endif
