#include <stdbool.h>
#include <stdio.h>
#include <stdlib.h>
#include <ctype.h>
#include <string.h>

#include "error.h"
#include "poly.h"

typedef struct poly_t {
    int coef;
    int exp;
    int size;
} poly_t;

inline __attribute__((always_inline)) void bubbleSort(poly_t* p, int n) {
    int swapped, i, j;
    for (i = 0; i < n - 1; i++) {
        swapped = 0;
        for (j = 0; j < n - i - 1; j++) {
            if (p[j].exp < p[j + 1].exp) {
                poly_t temp = p[j];
                p[j] = p[j + 1];
                p[j + 1] = temp;
                swapped = 1;
            }
        }
        // If no two elements were swapped by inner loop, then break
        if (!swapped)
            break;
    }
}

inline __attribute__((always_inline)) poly_t* new_poly_from_string(const char* pol) {
    poly_t* p = calloc(10000, sizeof(poly_t));

    char c;
    int i = 0;
    int j = 0;
    int x = 0;
    int num = 0;
    unsigned int type = 0;

    for (int n = 0; n < 10000; n++){
        p[n].coef = 1;
    }

    for (c = pol[i]; pol[i++] != '\0'; c = pol[i]) {
        if (isdigit(c)) {
            x = x*10 + c - '0';
            num = 1;
            continue;
        }
        if (num) {
            if (!type) {
                p[j].coef *= x;
                x = 0;
                num = 0;
            } else {
                p[j].exp = x;
                x = num  = 0;
            }
        }
        if (c == 'x') {
            p[j].exp = 1;
        }
        if (c == '^')
            type = 1;
        if (c == '+') {
            type = 0;
            j++;
        }
        if (c == '-') {
            type = 0;
            j++;
            p[j].coef = -1;
        }
    }
    if (num) {
        if (!type)
            p[j].coef *= x;
        else
            p[j].exp = x;
    }
    p[0].size = j;

    return p;
}

inline __attribute__((always_inline)) void free_poly(poly_t* p) {
    free(p);
}

inline __attribute__((always_inline)) poly_t* mul(poly_t* p, poly_t* q) {
    poly_t* r = calloc(10000005, sizeof(poly_t));
    int idx = 0;
    int i, j, coef, exp;

    for (i = 0; i <= p[0].size; i++) {
        for (j = 0; j <= q[0].size; j++) {
            coef = p[i].coef * q[j].coef;
            exp = p[i].exp + q[j].exp;
            
            r[exp].coef += coef;
            r[exp].exp = exp;
            idx++;
        }
    }

    bubbleSort(r, 100000000);
    r[0].size = idx;
    return r;
}

inline __attribute__((always_inline)) void print_poly(poly_t* p) {
    for (int i = 0; i <= p[0].size; i++) {
        if (p[i].coef > 0) {
            if ((p[i].coef > 1 && i > 0) || p[i].exp == 0)
                printf("+ %d", p[i].coef);
            else if (i > 0)
                printf("+ ");
            else if (p[i].coef > 1)
                printf("%d", p[i].coef);
        }
        if (p[i].coef < 0) {
            if (p[i].coef < -1 && i > 0)
                printf("- %d", -p[i].coef);
            else if (i > 0)
                printf("- ");
        }
        if (p[i].exp == 1)
            printf("x ");
        else if (p[i].exp > 1)
            printf("x^%d ", p[i].exp);
    }
    printf("\n");
}

#ifdef INCLUDE_MAIN // Run with flag -DINCLUDE_MAIN when compiling
int main(void) {
    // poly_t* p = new_poly_from_string("x^2 - 7x + 1"); // 3x + 2
    // poly_t* q = new_poly_from_string("3x + 2");

    poly_t* p = new_poly_from_string("x^10000000 + 2");
    poly_t* q = new_poly_from_string("2x^2 + 3x + 4");

    // poly_t* p = new_poly_from_string("772x^502 + 749x^418 - 806x^365 - 235x^338 + 657x^328 + 558x^259 - 152x^237 - 997x^138 x^104 - 742x^23 - 245x");
    // poly_t* p = new_poly_from_string("924x^871 + 86x^824 - 242x^749 + 600x^663 - 333x^570 + 952x^552 + 747x^508 - 945x^494 + x^408 - 877x^372 - 748x^359 + 646x^290 + 820x^259 - 405x^179 + 849x^176 - 419x^172 + 662x^118 - 127x^87 - 664x^3 + 652");
    // printf("924x^871 + 86x^824 - 242x^749 + 600x^663 - 333x^570 + 952x^552 + 747x^508 - 945x^494 + x^408 - 877x^372 - 748x^359 + 646x^290 + 820x^259 - 405x^179 + 849x^176 - 419x^172 + 662x^118 - 127x^87 - 664x^3 + 652\n");

    poly_t* r = mul(p, q);
    print_poly(r);
    free_poly(p);
    free_poly(q);
    free_poly(r);

    return 0;
}
#endif
