#include <stdio.h>
#include <stdlib.h>
#include <stdint.h>
#include <string.h>
#include <math.h>

#define M 50
#define N 50
#define eps 1e-6

/* -- Optimization ideas --
 * malloc(sizeof(simplex_t * nbr_simplex); everything freed in one free, can only use one malloc so no matric malloc. F5 : 5.
 * Flexible array, F5 : 5
 * Use uint8 for sizes, rows/cols
 * Maybe use register/static
 * Stack allocate more
 * Remove/Limit callocs
 * Better list
 * Use malloc matrix instead of calloc, place it all in the same memory
 * Remove M, does not change between itterations??
 * Parallell multiplications with compiler, vector multiplication
 * Lower size of M, N/Find optimal memory size. Does N have a upper limit?
 */

/* TYPEDEFS */
typedef struct simplex_t simplex_t;
typedef struct node_t node_t;
typedef struct list_node_t list_node_t;

/* HELPER FUNCTIONS */
// --------------------//
void printVectorDouble(double* vector, int length) {
    for (int i = 0; i < length; i++) {
        printf("%.2f ", vector[i]);
    }
    printf("\n\n");
}
void printVectorInt(int* vector, int length) {
    for (int i = 0; i < length; i++) {
        printf("%d ", vector[i]);
    }
    printf("\n\n");
}
void printMatrix(double** matrix, int rows, int cols) {
   for (int i = 0; i < rows; i++) {
        for (int j = 0; j < cols; j++) {
            printf("%.2f ", matrix[i][j]);
        }
        printf("\n");
    }
    printf("\n");
}
//--------------------------//

struct simplex_t {
    // TODO: unsigned int m:5;
    int m;
    int n;
    int* var;
    double** a;
    double* b;
    double* c;
    double* x;
    double y;
};

struct node_t {
    int m, n, k, h;
    double xh;
    double ak;
    double bk;
    double* min;
    double* max;
    double** a;
    double* b;
    double* x;
    double* c;
    double z;
};

struct list_node_t {
    list_node_t* next;
    list_node_t* prev;
    node_t* node;
};

// Initialize functions
// Branch-and-bound
node_t* initial_node(int m, int n, double** a, double* b, double* c);
node_t* extend(node_t* p, int m, int n, double** a, double* b, double* c, int k, double ak, double bk);
int is_integer(double* xp);
int integer(node_t* p);
void bound(node_t* p, list_node_t** h, double* zp, double* x);
int branch(node_t* q, double z);
void succ(node_t* p, list_node_t** h, int m, int n, double** a, double* b, double* c, int k, double ak, double bk, double* zp, double* x);
double intopt(int m, int n, double** a, double* b, double* c, double* x);
// Simplex
int init(simplex_t* simplex, int m, int n, double** a, double* b, double* c, double* x, double y, int* var);
int select_nonbasic (simplex_t* simplex);
void prepare (simplex_t* simplex, int k);
int initial(simplex_t* simplex, int m, int n, double** a, double* b, double* c, double* x, double y, int* var);
void pivot(simplex_t* simplex, int row, int col);
double xsimplex(int m, int n, double** a, double* b, double* c, double* x, double y, int* var, int h);
double simplex(int m, int n, double** a, double* b, double* c, double* x, double y);

// Free functions
void free_node(node_t* p) {
    free(p->min);
    free(p->max);
    for (int i = 0; i < M; i++)
        free(p->a[i]);
    free(p->a);
    free(p->b);
    free(p->x);
    free(p->c);
    free(p);
}

node_t* initial_node(int m, int n, double** a, double* b, double* c) {
    int i, j;
    struct node_t* p = calloc(1, sizeof(struct node_t));

    p->a = calloc(M, sizeof(double*));
    for (i = 0; i < M; i++) {
        p->a[i] = calloc(N, sizeof(double));
    }
    p->b = calloc(M, sizeof(double));
    p->c = calloc(N, sizeof(double));
    p->x = calloc(N, sizeof(double));
    p->min = calloc(N, sizeof(double));
    p->max = calloc(N, sizeof(double));
    p->m = m;
    p->n = n;

    for(i = 0; i < m; i++){
        p->b[i] = b[i];
    }

    for(i = 0; i < n; i++){
        p->c[i] = c[i];
    }

    for(i = 0; i < m; i++){
        for (j = 0; j < n; j++){
            p->a[i][j] = a[i][j];
        }
    }

    for (i = 0; i < n; i++) {
        p->min[i] = -INFINITY;
        p->max[i] = INFINITY;
    }
    
    // Return address
    return p;
}

node_t* extend(node_t* p, int m, int n, double** a, double* b, double* c, int k, double ak, double bk) {
    int i, j;
    struct node_t* q = calloc(1, sizeof(struct node_t));

    q->k = k;
    q->ak = ak;
    q->bk = bk;
    
    if (ak > 0 && p->max[k] < INFINITY) {
        q->m = p->m;
    } else if (ak < 0 && p->min[k] > 0) {
        q->m = p->m;
    } else {
        q->m = p->m + 1;
    }
    q->n = p->n;
    q->h = -1;

    q->a = calloc(M, sizeof(double*));
    for (i = 0; i < M; i++)
        q->a[i] = calloc(N, sizeof(double));
    q->b = calloc(M, sizeof(double));
    q->c = calloc(N, sizeof(double));
    q->x = calloc(N, sizeof(double));
    q->min = calloc(N, sizeof(double));
    q->max = calloc(N, sizeof(double));

    for (i = 0; i < p->n; i++) {
        q->min[i] = p->min[i];
        q->max[i] = p->max[i];
        q->c[i] = c[i];
    }
    for (i = 0; i < m; i++)
        q->b[i] = b[i];
    for (i = 0; i < m; i++)
        for (j = 0; j < n; j++)
            q->a[i][j] = a[i][j];
    
    if (ak > 0) {
        if (q->max[k] == INFINITY || bk < q->max[k])
            q->max[k] = bk;
    } else if (q->min[k] == -INFINITY || -bk > q->min[k]) {
        q->min[k] = -bk;
    }
    for (i = m, j = 0; j < n; j++) {
        // printf("i/m: %d, j: %d\n", i, j);
        if (q->min[j] > -INFINITY) {
            q->a[i][j] = -1;
            q->b[i] = -q->min[j];
            i++;
        }
        if (q->max[j] < INFINITY) {
            q->a[i][j] = 1;
            q->b[i] = q->max[j];
            i++;
        }
    }
    return q;
}

int is_integer(double* xp) {
    double x = *xp;
    double r = lround(x);
    if (fabs(r - x) < eps) {
        *xp = r;
        return 1;
    }
    return 0;
}

int integer(node_t* p) {
    int i;
    for (i = 0; i < p->n; i++)
        if (!is_integer(&p->x[i]))
            return 0;
    return 1;
}

void bound(node_t* p, list_node_t** h, double* zp, double* x) {
    // zp pointer to current z-max
    if (p->z > *zp) {
        *zp = p->z;
        for (int i = 0; i < p->n; i++)
            x[i] = p->x[i];

        list_node_t* current = *h;
        while (current != NULL) {
            list_node_t* next = current->next;
            if (current->node->z < p->z) {
                if (current->prev != NULL) {
                    current->prev->next = current->next;
                } else {
                    *h = current->next;
                }
                if (current->next != NULL) {
                    current->next->prev = current->prev;
                }
                // TODO: free_node(current->data) and next/prev instead, not freeing everything atm
                free(current->node->min);
                free(current->node->max);
                free(current->node);
                free(current);
            }
            current = next;
        }
    }
}

int branch(node_t* q, double z) {
    int h, i;
    double min, max;

    if (q->z < z)
        return 0;

    for (h = 0; h < q->n; h++) {
        if (!is_integer(&q->x[h])) {
            if (q->min[h] == -INFINITY) {
                min = 0;
            } else {
                min = q->min[h];
            }
            max = q->max[h];
            if (floor(q->x[h]) < min || ceil(q->x[h]) > max)
                continue;
            q->h = h;
            q->xh = q->x[h];
            for (i = 0; i < M; i++) {
                free(q->a[i]);
            }
            free(q->a);
            free(q->b);
            free(q->c);
            free(q->x);
            return 1;
        }
    }
    return 0;
}

void succ(node_t* p, list_node_t** h, int m, int n, double** a, double* b, double* c, int k, double ak, double bk, double* zp, double* x) {
    node_t* q = extend(p, m, n, a, b, c, k, ak, bk);

    if (q == NULL)
        return;
        
    q->z = simplex(q->m, q->n, q->a, q->b, q->c, q->x, 0);

    if (isfinite(q->z)) {
        if (integer(q)) {
            bound(q, h, zp, x);
        } else if(branch(q, *zp)) {
            list_node_t* new_first = calloc(1, sizeof(struct list_node_t));
            new_first->node = q;
            new_first->next = *h;

            if (*h != NULL)
                (*h)->prev = new_first;

            *h = new_first;
            return;
        }
    }
    free_node(q);
}

double intopt(int m, int n, double** a, double* b, double* c, double* x) {
    int i;
    node_t* p = initial_node(m, n, a, b, c);
    list_node_t* h = calloc(1, sizeof(list_node_t));
    h->node = p;
    double z = -INFINITY;
    p->z = simplex(p->m, p->n, p->a, p->b, p->c, p->x, 0);
    if (integer(p) || !isfinite(p->z)) {
        z = p->z;
        if (integer(p)) {
            for (i = 0; i < p->n; i++)
                x[i] = p->x[i];
        }
        free_node(p);
        free(h);
        return z;
    }
    branch(p, z);
    while (h != NULL) {
        p = h->node;
        list_node_t* old = h;
        if (h->next != NULL) {
            h->next->prev = NULL;
        }
        h = h->next;
        free(old);

        succ(p, &h, m, n, a, b, c, p->h, 1, floor(p->xh), &z, x);
        succ(p, &h, m, n, a, b, c, p->h, -1, -ceil(p->xh), &z, x);

        free(p->min); //TODO: Why not free_node
        free(p->max);
        free(p);
    }
    if (z == -INFINITY) {
        return NAN;
    } else {
        return z;
    }
}

int init(simplex_t* s, int m, int n, double** a, double* b, double* c, double* x, double y, int* var) {
    int i, k;

    *s = (simplex_t){.m = m, .n = n, .var = var, .a = a, .b = b, .c = c, .x = x, .y = y};

    if(s->var == NULL){
        s->var = calloc(m+n+1, sizeof(int));
        for(i = 0;i < n + m; i++) {
            s->var[i] = i;
        }
    }
    for(k = 0, i = 1; i < m; i++) {
        if(b[i] < b[k]){
            k = i;
        }
    }
    return k;
}

int select_nonbasic(simplex_t* s) {
    int i;
    for (i = 0; i < s->n; i++)
        if (s->c[i] > eps)
            return i;
    return -1;
}

void prepare(simplex_t* s, int k) {
    int m = s->m;
    int n = s->n;
    int i;
    for(i = m+n; i>n;i--){
        s->var[i] = s->var[i-1];
    }
    s->var[n] = m+n;
    n++;
    for(i = 0; i < m; i++){
        s->a[i][n-1] = -1;
    }
    s->x = calloc(m+n, sizeof(double));
    s->c = calloc(m+n, sizeof(double));
    s->c[n-1] = -1;
    s->n = n;
    pivot(s,k,n-1);
}

int initial(simplex_t* s, int m, int n, double** a, double* b, double* c, double* x, double y, int* var) {
    int i,j,k;
    double w;

    k = init(s, m, n, a, b, c, x, y, var);

    if(b[k] >= 0)
        return 1;

    prepare(s,k);
    n = s->n;

    s->y = xsimplex(m, n, s->a, s->b, s->c, s->x, 0, s->var, 1);
    for (i = 0; i < m+n; i++) {
        if (s->var[i] == m+n-1) {
            if (fabs(s->x[i]) > eps) {
                free(s->x);
                free(s->c);
                return 0;
            } else {
                break;
            }
        }
    }

    if (i >= n) {
        for (j = k = 0; k < n; k++)
            if (fabs(s->a[i-n][k]) > fabs(s->a[i-n][j]))
                j = k;
        pivot(s, i-n, j);
        i = j;
    }

    if (i < n-1) {
        k = s->var[i];
        s->var[i] = s->var[n-1];
        s->var[n-1] = k;

        for(k = 0; k < m; k++) {
            w = s->a[k][n-1];
            s->a[k][n-1] = s->a[k][i];
            s->a[k][i] = w;
        }
    }
    free(s->c);
    s->c = c;
    s->y = y;
    for(k = n-1; k < n+m-1; k++){
      s->var[k] = s->var[k+1];
    }
    n = s->n = s->n-1;
    double *t = calloc(n, sizeof(double));

    for(k = 0; k < n; k++){
        for(j = 0; j < n; j++){
            if(k == s->var[j]){
                t[j] = t[j] + s->c[k];
                goto next_k;
            }
        }
        for(j = 0; j < m; j++)
            if(s->var[n+j] == k)
                break;
        s->y = s->y + s->c[k] * s->b[j];
        
        for(i = 0; i < n; i++)
            t[i] = t[i] - s->c[k] * s->a[j][i];
        next_k:;
    }

    for(i = 0; i < n; i++){
        s->c[i] = t[i];
    }
    free(t);
    free(s->x);
    return 1;
}

void pivot(simplex_t* s, int row, int col) {
    double** a = s->a;
    double* b = s->b;
    double* c = s->c;

    int m = s->m;
    int n = s->n;
    int i,j,temp;

    temp = s->var[col];
    s->var[col] = s->var[n+row];
    s->var[n+row] = temp;

    s->y = s->y + c[col] * b[row] / a[row][col];

    double a_row_col = 1 / a[row][col];

    //Skip col
    //double c_col = c[col];
    //#pragma unroll (8)
    //int res = n % 4;
    //for (i = 0; i < round((n / 4) - 0.5); i += 4) {
    //    c[i] = c[i] - c_col * a[row][i] * a_row_col;
    //    c[i + 1] = c[i + 1] - c_col * a[row][i + 1] * a_row_col;
    //    c[i + 2] = c[i + 2] - c_col * a[row][i + 2] * a_row_col;
    //    c[i + 3] = c[i + 3] - c_col * a[row][i + 3] * a_row_col;
    //}
    //int gotto = i;
    //for (i = gotto; i < gotto + res; i++) {
    //    c[i] = c[i] - c_col * a[row][i] * a_row_col;
    //}
    //c[col] = c_col;
    
    for (i = 0; i < col; i++) {
        c[i] = c[i] - c[col] * a[row][i] * a_row_col;
    }
    for (i = col+1; i < n; i++) {
        c[i] = c[i] - c[col] * a[row][i] * a_row_col;
    }
    c[col] = -c[col] * a_row_col;

    // Skip row
    for (i = 0; i < row; i++) {
        b[i] = b[i] - a[i][col] * b[row] * a_row_col;
    }
    for (i = row+1; i < m; i++) {
        b[i] = b[i] - a[i][col] * b[row] * a_row_col;
    }

    // Skip row and col
    //for (i = 0; i < m; i++) {
    //    if (i != row) {
    //        for(j = 0; j < n; j++)
    //            if (j != col) 
    //                a[i][j] = a[i][j] - a[i][col] * a[row][j] * a_row_col;
    //    }
    //}
    for (i = 0; i < row; i++) {
        for(j = 0; j < col; j++)
            a[i][j] = a[i][j] - a[i][col] * a[row][j] * a_row_col;
        for(j = col+1; j < n; j++)
            a[i][j] = a[i][j] - a[i][col] * a[row][j] * a_row_col;
    }
    for (i = row+1; i < m; i++) {
        for(j = 0; j < col; j++)
            a[i][j] = a[i][j] - a[i][col] * a[row][j] * a_row_col;
        for(j = col+1; j < n; j++)
            a[i][j] = a[i][j] - a[i][col] * a[row][j] * a_row_col;
    }

    // Skip row
    for(i = 0; i < row; i++) {
        a[i][col] = -a[i][col] * a_row_col;
    }
    for(i = row+1; i < m; i++) {
        a[i][col] = -a[i][col] * a_row_col;
    }

    // Skip col
    for(i = 0; i < col; i++) {
        a[row][i] = a[row][i] * a_row_col;
    }
    for(i = col+1; i < n; i++) {
        a[row][i] = a[row][i] * a_row_col;
    }

    b[row] = b[row] * a_row_col;
    a[row][col] = 1 * a_row_col;
}

double xsimplex(int m, int n, double** a, double* b, double* c, double* x, double y, int* var, int h) {
    simplex_t s;
    int i, row, col;

    if (!initial(&s, m, n, a, b, c, x, y, var)) {
        free(s.var);
        // s.var = NULL; // TODO: Nessessary?
        return NAN;
    }

    while (1) {
        col = select_nonbasic(&s);
        if (col < 0) {
            break;
        }
        row = -1;
        for(i = 0; i < m; i++) {
            if(a[i][col] > eps && (row < 0 || b[i] / a[i][col] < b[row] / a[row][col])) {
                row = i;
            }
        }
        if (row < 0) {
            free(s.var);
            s.var = NULL;
            return INFINITY;
        }

        pivot(&s, row, col);
    }

    if (h == 0) {
        for(i = 0; i < n; i++) {
            if (s.var[i] < n) {
                x[s.var[i]] = 0;
            }
        }
        for(i = 0; i < m; i++) {
            if (s.var[n+i] < n) {
                x[s.var[n+i]] = s.b[i];
            }
        }
        free(s.var);
    } else {
        for (i = 0; i < n; i++)
            x[i] = 0;
        for (i = n; i < n+m; i++)
            x[i] = s.b[i-n];
    }
    return s.y;
}

double simplex(int m, int n, double** a, double* b, double* c, double* x, double y) {
    return xsimplex(m, n, a, b, c, x, y, NULL, 0);
}

// #define INCLUDE_MAIN
#ifdef INCLUDE_MAIN
int main(int argc, char** argv)
{

    int m;
    int n;

    // Read size of matrix
    scanf("%d %d/n", &m, &n);

    // Allocate pointers
    double** a;
    double* b;
    double* c;

    // Allocate memory
    a = calloc(M, sizeof(double*));
    for(int i = 0; i < M; i++)
        a[i] = calloc(N, sizeof(double));

    b = calloc(M, sizeof(double));
    c = calloc(N, sizeof(double));

    double* x = calloc(M+N, sizeof(double));
    double y = 0;

    // Read from standard input
    for(int i = 0; i < n; i++)
        scanf("%lf", c+i);
    scanf("/n");

    for(int i = 0; i < m; i++) {
        for(int j = 0; j < n; j++)
            scanf("%lf", a[i]+j);
        scanf("/n");
    }

    for(int i = 0; i < m; i++)
        scanf("%lf", b+i);
    scanf("/n");


    double awns = intopt(m, n, a, b, c, x);
    printf("z = %lf\n", awns);

    // Free memory
    for(int i = 0; i < M; i++)
        free(a[i]);

    free(a);
    free(b);
    free(c);
    free(x);

    return 0;
}
#endif
